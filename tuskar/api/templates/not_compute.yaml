<%namespace name="conf" file="provision.conf.mako"/>\
<%namespace name="sh" file="provision.sh.mako"/>\
<%def name="render(x=0)">\
  notcompute:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /root/tuskar/provision.conf:
              content:
                Fn::Base64:
                  |
<% conf.render() %>\
              mode: "000644"
              owner: root
              group: root
            /root/tuskar/provision.sh:
              content:
                Fn::Base64:
                  |
<% sh.render() %>\
              mode: "000700"
              owner: root
              group: root
      os-collect-config:
        cfn:
          access_key_id:
            Ref: Key
          path: notcomputeConfig.Metadata
          secret_access_key:
            Fn::GetAtt:
            - Key
            - SecretAccessKey
          stack_name:
            Ref: AWS::StackName
    Properties:
      flavor:
        Ref: Flavor
      image:
        Ref: notcomputeImage
      key_name:
        Ref: KeyName
      availability_zone: nova::${x}
      user_data:
        Fn::Base64:
          |
          #!/bin/bash -v
          cat > /usr/local/bin/json2kv <<EOF
          #!/usr/bin/env python
          
          import os
          import re
          import simplejson
          import sys
          
          def printenv(data, ns=[]):
              for key,value in data.items():
          
                  # Ignore the entire AWS::CloudFormation::Init section, it can contain
                  # custom scripts to be run by cloud-init, and it's problematic to escape those
                  # properly in the template for json2kv.
                  # Since parent keys are added to the ns list with underscores, we also
                  # need to check if AWS__CloudFormation__Init is in the namespace.
                  if key == "AWS::CloudFormation::Init" or "AWS__CloudFormation__Init" in ns:
                      continue
          
                  key = re.sub('[\\.\\-:]', '_', key)
                  if isinstance(value, str):
                      print "%s=%s"%("_".join(ns+[key]), value)
                  elif isinstance(value, dict):
                      print "%s=1"%("_".join(ns+[key]))
                      printenv(value, ns+[key])
          
          if __name__ == '__main__':
              # Find the first file that exists and use it
              for jsonfile in sys.argv[1:]:
                  if not os.path.isfile(jsonfile):
                      continue
                  break
              else:
                  exit(1)
          
              with open(jsonfile) as fp:
                  data = simplejson.loads(fp.read())
                  printenv(data)
          EOF
          
          chmod 755 /usr/local/bin/json2kv
          /opt/aws/bin/cfn-init
          # We need to set the undercloud Heat IP in the boto config.  Atm this
          # is hardcoded.  We should set a hostname in the tuskar conf.
          sed -e "s/0.0.0.0/192.0.2.2/g" /var/lib/heat-cfntools/cfn-boto-cfg > /tmp/cfn-boto-cfg
          mv -f /tmp/cfn-boto-cfg /var/lib/heat-cfntools/cfn-boto-cfg
          exec /root/tuskar/provision.sh &> /root/tuskar/provision.log &
    Type: OS::Nova::Server
  notcomputeConfig:
    Metadata:
      OpenStack::Heat::Stack: {}
      Openstack::ImageBuilder::Elements:
      - boot-stack
      - heat-cfntools
      - heat-localip
      - neutron-network-node
      admin-password:
        Ref: AdminPassword
      admin-token:
        Ref: AdminToken
      cinder:
        db: mysql://cinder:unset@localhost/cinder
        service-password:
          Ref: CinderPassword
        volume_size_mb: '5000'
      controller-address:
        Fn::Select:
        - 0
        - Fn::Select:
          - ctlplane
          - Fn::GetAtt:
            - notcompute
            - networks
      db-password: unset
      glance:
        db: mysql://glance:unset@localhost/glance
        host:
          Fn::Select:
          - 0
          - Fn::Select:
            - ctlplane
            - Fn::GetAtt:
              - notcompute
              - networks
        service-password:
          Ref: GlancePassword
      heat:
        admin_password:
          Ref: HeatPassword
        admin_tenant_name: service
        admin_user: heat
        auth_encryption_key: unset___________
        db: mysql://heat:unset@localhost/heat
        heat_watch_server_url:
          Fn::Join:
          - ''
          - - http://
            - Fn::Select:
              - 0
              - Fn::Select:
                - ctlplane
                - Fn::GetAtt:
                  - notcompute
                  - networks
            - :8003
        metadata_server_url:
          Fn::Join:
          - ''
          - - http://
            - Fn::Select:
              - 0
              - Fn::Select:
                - ctlplane
                - Fn::GetAtt:
                  - notcompute
                  - networks
            - :8000
        waitcondition_server_url:
          Fn::Join:
          - ''
          - - http://
            - Fn::Select:
              - 0
              - Fn::Select:
                - ctlplane
                - Fn::GetAtt:
                  - notcompute
                  - networks
            - :8000/v1/waitcondition
      interfaces:
        control: eth0
      keystone:
        db: mysql://keystone:unset@localhost/keystone
        host:
          Fn::Select:
          - 0
          - Fn::Select:
            - ctlplane
            - Fn::GetAtt:
              - notcompute
              - networks
      neutron:
        host:
          Fn::Select:
          - 0
          - Fn::Select:
            - ctlplane
            - Fn::GetAtt:
              - notcompute
              - networks
        metadata_proxy_shared_secret: unset
        ovs:
          enable_tunneling: 'True'
          local_ip:
            Fn::Select:
            - 0
            - Fn::Select:
              - ctlplane
              - Fn::GetAtt:
                - notcompute
                - networks
          physical_bridge: br-ex
          public_interface: eth0
          tenant_network_type: gre
        ovs_db: mysql://neutron:unset@localhost/ovs_neutron?charset=utf8
        service-password:
          Ref: NeutronPassword
      nova:
        compute_driver: libvirt.LibvirtDriver
        db: mysql://nova:unset@localhost/nova
        host:
          Fn::Select:
          - 0
          - Fn::Select:
            - ctlplane
            - Fn::GetAtt:
              - notcompute
              - networks
        metadata-proxy: true
        service-password:
          Ref: NovaPassword
      os-collect-config:
        cfn:
          access_key_id:
            Ref: Key
          path: notcomputeConfig.Metadata
          secret_access_key:
            Fn::GetAtt:
            - Key
            - SecretAccessKey
          stack_name:
            Ref: AWS::StackName
      rabbit:
        host:
          Fn::Select:
          - 0
          - Fn::Select:
            - ctlplane
            - Fn::GetAtt:
              - notcompute
              - networks
        password: guest
    Properties:
      ImageId: '0'
      InstanceType: '0'
    Type: AWS::AutoScaling::LaunchConfiguration
</%def>\
